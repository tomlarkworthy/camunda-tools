{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://analyticsreporting.googleapis.com/"
    }
  ],
  "info": {
    "contact": {
      "name": "Google",
      "url": "https://google.com"
    },
    "description": "Accesses Analytics report data.",
    "license": {
      "name": "Creative Commons Attribution 3.0",
      "url": "http://creativecommons.org/licenses/by/3.0/"
    },
    "termsOfService": "https://developers.google.com/terms/",
    "title": "Analytics Reporting",
    "version": "v4",
    "x-apiClientRegistration": {
      "url": "https://console.developers.google.com"
    },
    "x-apisguru-categories": [
      "analytics"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png"
    },
    "x-origin": [
      {
        "converter": {
          "url": "https://github.com/lucybot/api-spec-converter",
          "version": "2.7.31"
        },
        "format": "google",
        "url": "https://analyticsreporting.googleapis.com/$discovery/rest?version=v4",
        "version": "v1"
      }
    ],
    "x-preferred": true,
    "x-providerName": "googleapis.com",
    "x-serviceName": "analyticsreporting"
  },
  "externalDocs": {
    "url": "https://developers.google.com/analytics/devguides/reporting/core/v4/"
  },
  "tags": [
    {
      "name": "reports"
    },
    {
      "name": "userActivity"
    }
  ],
  "paths": {
    "/v4/reports:batchGet": {
      "parameters": [
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        }
      ],
      "post": {
        "description": "Returns the Analytics data.",
        "operationId": "analyticsreporting.reports.batchGet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetReportsResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/analytics"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/analytics"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/analytics.readonly"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/analytics.readonly"
            ]
          }
        ],
        "tags": [
          "reports"
        ]
      }
    },
    "/v4/userActivity:search": {
      "parameters": [
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        }
      ],
      "post": {
        "description": "Returns User Activity data.",
        "operationId": "analyticsreporting.userActivity.search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchUserActivityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUserActivityResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/analytics"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/analytics"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/analytics.readonly"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/analytics.readonly"
            ]
          }
        ],
        "tags": [
          "userActivity"
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "_.xgafv": {
        "description": "V1 error format.",
        "in": "query",
        "name": "$.xgafv",
        "schema": {
          "enum": [
            "1",
            "2"
          ],
          "type": "string"
        }
      },
      "access_token": {
        "description": "OAuth access token.",
        "in": "query",
        "name": "access_token",
        "schema": {
          "type": "string"
        }
      },
      "alt": {
        "description": "Data format for response.",
        "in": "query",
        "name": "alt",
        "schema": {
          "default": "json",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "type": "string"
        }
      },
      "callback": {
        "description": "JSONP",
        "in": "query",
        "name": "callback",
        "schema": {
          "type": "string"
        }
      },
      "fields": {
        "description": "Selector specifying which fields to include in a partial response.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "key": {
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
        "in": "query",
        "name": "key",
        "schema": {
          "type": "string"
        }
      },
      "oauth_token": {
        "description": "OAuth 2.0 token for the current user.",
        "in": "query",
        "name": "oauth_token",
        "schema": {
          "type": "string"
        }
      },
      "prettyPrint": {
        "description": "Returns response with indentations and line breaks.",
        "in": "query",
        "name": "prettyPrint",
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "quotaUser": {
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
        "in": "query",
        "name": "quotaUser",
        "schema": {
          "type": "string"
        }
      },
      "uploadType": {
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
        "in": "query",
        "name": "uploadType",
        "schema": {
          "type": "string"
        }
      },
      "upload_protocol": {
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
        "in": "query",
        "name": "upload_protocol",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "Activity": {
        "description": "An Activity represents data for an activity of a user. Note that an\nActivity is different from a hit.\nA hit might result in multiple Activity's. For example, if a hit\nincludes a transaction and a goal completion, there will be two\nActivity protos for this hit, one for ECOMMERCE and one for GOAL.\nConversely, multiple hits can also construct one Activity. In classic\ne-commerce, data for one transaction might be sent through multiple hits.\nThese hits will be merged into one ECOMMERCE Activity.",
        "properties": {
          "activityTime": {
            "description": "Timestamp of the activity. If activities for a visit cross midnight and\noccur in two separate dates, then two sessions (one per date)\nshare the session identifier.\nFor example, say session ID 113472 has activity within 2019-08-20, and\nsession ID 243742 has activity within 2019-08-25 and 2019-08-26. Session ID\n113472 is one session, and session ID 243742 is two sessions.",
            "format": "google-datetime",
            "type": "string"
          },
          "activityType": {
            "description": "Type of this activity.",
            "enum": [
              "ACTIVITY_TYPE_UNSPECIFIED",
              "PAGEVIEW",
              "SCREENVIEW",
              "GOAL",
              "ECOMMERCE",
              "EVENT"
            ],
            "type": "string"
          },
          "appview": {
            "$ref": "#/components/schemas/ScreenviewData",
            "description": "This will be set if `activity_type` equals `SCREEN_VIEW`."
          },
          "campaign": {
            "description": "For manual campaign tracking, it is the value of the utm_campaign campaign\ntracking parameter. For AdWords autotagging, it is the name(s) of the\nonline ad campaign(s) you use for the property. If you use neither, its\nvalue is (not set).",
            "type": "string"
          },
          "channelGrouping": {
            "description": "The Channel Group associated with an end user's session for this View\n(defined by the View's Channel Groupings).",
            "type": "string"
          },
          "customDimension": {
            "description": "A list of all custom dimensions associated with this activity.",
            "items": {
              "$ref": "#/components/schemas/CustomDimension"
            },
            "type": "array"
          },
          "ecommerce": {
            "$ref": "#/components/schemas/EcommerceData",
            "description": "This will be set if `activity_type` equals `ECOMMERCE`."
          },
          "event": {
            "$ref": "#/components/schemas/EventData",
            "description": "This field contains all the details pertaining to an event and will be\nset if `activity_type` equals `EVENT`."
          },
          "goals": {
            "$ref": "#/components/schemas/GoalSetData",
            "description": "This field contains a list of all the goals that were reached in this\nactivity when `activity_type` equals `GOAL`."
          },
          "hostname": {
            "description": "The hostname from which the tracking request was made.",
            "type": "string"
          },
          "keyword": {
            "description": "For manual campaign tracking, it is the value of the utm_term campaign\ntracking parameter. For AdWords traffic, it contains the best matching\ntargeting criteria. For the display network, where multiple targeting\ncriteria could have caused the ad to show up, it returns the best matching\ntargeting criteria as selected by Ads. This could be display_keyword, site\nplacement, boomuserlist, user_interest, age, or gender. Otherwise its value\nis (not set).",
            "type": "string"
          },
          "landingPagePath": {
            "description": "The first page in users' sessions, or the landing page.",
            "type": "string"
          },
          "medium": {
            "description": "The type of referrals. For manual campaign tracking, it is the value of the\nutm_medium campaign tracking parameter. For AdWords autotagging, it is cpc.\nIf users came from a search engine detected by Google Analytics, it is\norganic. If the referrer is not a search engine, it is referral. If users\ncame directly to the property and document.referrer is empty, its value is\n(none).",
            "type": "string"
          },
          "pageview": {
            "$ref": "#/components/schemas/PageviewData",
            "description": "This will be set if `activity_type` equals `PAGEVIEW`. This field\ncontains all the details about the visitor and the page that was visited."
          },
          "source": {
            "description": "The source of referrals. For manual campaign tracking, it is the value of\nthe utm_source campaign tracking parameter. For AdWords autotagging, it is\ngoogle. If you use neither, it is the domain of the source\n(e.g., document.referrer) referring the users. It may also contain a port\naddress. If users arrived without a referrer, its value is (direct).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Cohort": {
        "description": "Defines a cohort. A cohort is a group of users who share a common\ncharacteristic. For example, all users with the same acquisition date\nbelong to the same cohort.",
        "properties": {
          "dateRange": {
            "$ref": "#/components/schemas/DateRange",
            "description": "This is used for `FIRST_VISIT_DATE` cohort, the cohort selects users\nwhose first visit date is between start date and end date defined in the\nDateRange. The date ranges should be aligned for cohort requests. If the\nrequest contains `ga:cohortNthDay` it should be exactly one day long,\nif `ga:cohortNthWeek` it should be aligned to the week boundary (starting\nat Sunday and ending Saturday), and for `ga:cohortNthMonth` the date range\nshould be aligned to the month (starting at the first and ending on the\nlast day of the month).\nFor LTV requests there are no such restrictions.\nYou do not need to supply a date range for the\n`reportsRequest.dateRanges` field."
          },
          "name": {
            "description": "A unique name for the cohort. If not defined name will be auto-generated\nwith values cohort_[1234...].",
            "type": "string"
          },
          "type": {
            "description": "Type of the cohort. The only supported type as of now is\n`FIRST_VISIT_DATE`. If this field is unspecified the cohort is treated\nas `FIRST_VISIT_DATE` type cohort.",
            "enum": [
              "UNSPECIFIED_COHORT_TYPE",
              "FIRST_VISIT_DATE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CohortGroup": {
        "description": "Defines a cohort group.\nFor example:\n\n    \"cohortGroup\": {\n      \"cohorts\": [{\n        \"name\": \"cohort 1\",\n        \"type\": \"FIRST_VISIT_DATE\",\n        \"dateRange\": { \"startDate\": \"2015-08-01\", \"endDate\": \"2015-08-01\" }\n      },{\n        \"name\": \"cohort 2\"\n         \"type\": \"FIRST_VISIT_DATE\"\n         \"dateRange\": { \"startDate\": \"2015-07-01\", \"endDate\": \"2015-07-01\" }\n      }]\n    }",
        "properties": {
          "cohorts": {
            "description": "The definition for the cohort.",
            "items": {
              "$ref": "#/components/schemas/Cohort"
            },
            "type": "array"
          },
          "lifetimeValue": {
            "description": "Enable Life Time Value (LTV).  LTV measures lifetime value for users\nacquired through different channels.\nPlease see:\n[Cohort Analysis](https://support.google.com/analytics/answer/6074676) and\n[Lifetime Value](https://support.google.com/analytics/answer/6182550)\nIf the value of lifetimeValue is false:\n\n- The metric values are similar to the values in the web interface cohort\n  report.\n- The cohort definition date ranges must be aligned to the calendar week\n  and month. i.e. while requesting `ga:cohortNthWeek` the `startDate` in\n  the cohort definition should be a Sunday and the `endDate` should be the\n  following Saturday, and for `ga:cohortNthMonth`, the `startDate`\n  should be the 1st of the month and `endDate` should be the last day\n  of the month.\n\nWhen the lifetimeValue is true:\n\n- The metric values will correspond to the values in the web interface\n  LifeTime value report.\n- The Lifetime Value report shows you how user value (Revenue) and\n  engagement (Appviews, Goal Completions, Sessions, and Session Duration)\n  grow during the 90 days after a user is acquired.\n- The metrics are calculated as a cumulative average per user per the time\n  increment.\n- The cohort definition date ranges need not be aligned to the calendar\n  week and month boundaries.\n- The `viewId` must be an\n  [app view\n  ID](https://support.google.com/analytics/answer/2649553#WebVersusAppViews)",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ColumnHeader": {
        "description": "Column headers.",
        "properties": {
          "dimensions": {
            "description": "The dimension names in the response.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metricHeader": {
            "$ref": "#/components/schemas/MetricHeader",
            "description": "Metric headers for the metrics in the response."
          }
        },
        "type": "object"
      },
      "CustomDimension": {
        "description": "Custom dimension.",
        "properties": {
          "index": {
            "description": "Slot number of custom dimension.",
            "format": "int32",
            "type": "integer"
          },
          "value": {
            "description": "Value of the custom dimension. Default value (i.e. empty string) indicates\nclearing sesion/visitor scope custom dimension value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DateRange": {
        "description": "A contiguous set of days: startDate, startDate + 1 day, ..., endDate.\nThe start and end dates are specified in\n[ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date format `YYYY-MM-DD`.",
        "properties": {
          "endDate": {
            "description": "The end date for the query in the format `YYYY-MM-DD`.",
            "type": "string"
          },
          "startDate": {
            "description": "The start date for the query in the format `YYYY-MM-DD`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DateRangeValues": {
        "description": "Used to return a list of metrics for a single DateRange / dimension\ncombination",
        "properties": {
          "pivotValueRegions": {
            "description": "The values of each pivot region.",
            "items": {
              "$ref": "#/components/schemas/PivotValueRegion"
            },
            "type": "array"
          },
          "values": {
            "description": "Each value corresponds to each Metric in the request.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Dimension": {
        "description": "[Dimensions](https://support.google.com/analytics/answer/1033861)\nare attributes of your data. For example, the dimension `ga:city`\nindicates the city, for example, \"Paris\" or \"New York\", from which\na session originates.",
        "properties": {
          "histogramBuckets": {
            "description": "If non-empty, we place dimension values into buckets after string to\nint64. Dimension values that are not the string representation of an\nintegral value will be converted to zero.  The bucket values have to be in\nincreasing order.  Each bucket is closed on the lower end, and open on the\nupper end. The \"first\" bucket includes all values less than the first\nboundary, the \"last\" bucket includes all values up to infinity. Dimension\nvalues that fall in a bucket get transformed to a new dimension value. For\nexample, if one gives a list of \"0, 1, 3, 4, 7\", then we return the\nfollowing buckets:\n\n- bucket #1: values < 0, dimension value \"<0\"\n- bucket #2: values in [0,1), dimension value \"0\"\n- bucket #3: values in [1,3), dimension value \"1-2\"\n- bucket #4: values in [3,4), dimension value \"3\"\n- bucket #5: values in [4,7), dimension value \"4-6\"\n- bucket #6: values >= 7, dimension value \"7+\"\n\nNOTE: If you are applying histogram mutation on any dimension, and using\nthat dimension in sort, you will want to use the sort type\n`HISTOGRAM_BUCKET` for that purpose. Without that the dimension values\nwill be sorted according to dictionary\n(lexicographic) order. For example the ascending dictionary order is:\n\n   \"<50\", \"1001+\", \"121-1000\", \"50-120\"\n\nAnd the ascending `HISTOGRAM_BUCKET` order is:\n\n   \"<50\", \"50-120\", \"121-1000\", \"1001+\"\n\nThe client has to explicitly request `\"orderType\": \"HISTOGRAM_BUCKET\"`\nfor a histogram-mutated dimension.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the dimension to fetch, for example `ga:browser`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DimensionFilter": {
        "description": "Dimension filter specifies the filtering options on a dimension.",
        "properties": {
          "caseSensitive": {
            "description": "Should the match be case sensitive? Default is false.",
            "type": "boolean"
          },
          "dimensionName": {
            "description": "The dimension to filter on. A DimensionFilter must contain a dimension.",
            "type": "string"
          },
          "expressions": {
            "description": "Strings or regular expression to match against. Only the first value of\nthe list is used for comparison unless the operator is `IN_LIST`.\nIf `IN_LIST` operator, then the entire list is used to filter the\ndimensions as explained in the description of the `IN_LIST` operator.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "not": {
            "description": "Logical `NOT` operator. If this boolean is set to true, then the matching\ndimension values will be excluded in the report. The default is false.",
            "type": "boolean"
          },
          "operator": {
            "description": "How to match the dimension to the expression. The default is REGEXP.",
            "enum": [
              "OPERATOR_UNSPECIFIED",
              "REGEXP",
              "BEGINS_WITH",
              "ENDS_WITH",
              "PARTIAL",
              "EXACT",
              "NUMERIC_EQUAL",
              "NUMERIC_GREATER_THAN",
              "NUMERIC_LESS_THAN",
              "IN_LIST"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DimensionFilterClause": {
        "description": "A group of dimension filters. Set the operator value to specify how\nthe filters are logically combined.",
        "properties": {
          "filters": {
            "description": "The repeated set of filters. They are logically combined based on the\noperator specified.",
            "items": {
              "$ref": "#/components/schemas/DimensionFilter"
            },
            "type": "array"
          },
          "operator": {
            "description": "The operator for combining multiple dimension filters. If unspecified, it\nis treated as an `OR`.",
            "enum": [
              "OPERATOR_UNSPECIFIED",
              "OR",
              "AND"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DynamicSegment": {
        "description": "Dynamic segment definition for defining the segment within the request.\nA segment can select users, sessions or both.",
        "properties": {
          "name": {
            "description": "The name of the dynamic segment.",
            "type": "string"
          },
          "sessionSegment": {
            "$ref": "#/components/schemas/SegmentDefinition",
            "description": "Session Segment to select sessions to include in the segment."
          },
          "userSegment": {
            "$ref": "#/components/schemas/SegmentDefinition",
            "description": "User Segment to select users to include in the segment."
          }
        },
        "type": "object"
      },
      "EcommerceData": {
        "description": "E-commerce details associated with the user activity.",
        "properties": {
          "actionType": {
            "description": "Action associated with this e-commerce action.",
            "enum": [
              "UNKNOWN",
              "CLICK",
              "DETAILS_VIEW",
              "ADD_TO_CART",
              "REMOVE_FROM_CART",
              "CHECKOUT",
              "PAYMENT",
              "REFUND",
              "CHECKOUT_OPTION"
            ],
            "type": "string"
          },
          "ecommerceType": {
            "description": "The type of this e-commerce activity.",
            "enum": [
              "ECOMMERCE_TYPE_UNSPECIFIED",
              "CLASSIC",
              "ENHANCED"
            ],
            "type": "string"
          },
          "products": {
            "description": "Details of the products in this transaction.",
            "items": {
              "$ref": "#/components/schemas/ProductData"
            },
            "type": "array"
          },
          "transaction": {
            "$ref": "#/components/schemas/TransactionData",
            "description": "Transaction details of this e-commerce action."
          }
        },
        "type": "object"
      },
      "EventData": {
        "description": "Represents all the details pertaining to an event.",
        "properties": {
          "eventAction": {
            "description": "Type of interaction with the object. Eg: 'play'.",
            "type": "string"
          },
          "eventCategory": {
            "description": "The object on the page that was interacted with. Eg: 'Video'.",
            "type": "string"
          },
          "eventCount": {
            "description": "Number of such events in this activity.",
            "format": "int64",
            "type": "string"
          },
          "eventLabel": {
            "description": "Label attached with the event.",
            "type": "string"
          },
          "eventValue": {
            "description": "Numeric value associated with the event.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetReportsRequest": {
        "description": "The batch request containing multiple report request.",
        "properties": {
          "reportRequests": {
            "description": "Requests, each request will have a separate response.\nThere can be a maximum of 5 requests. All requests should have the same\n`dateRanges`, `viewId`, `segments`, `samplingLevel`, and `cohortGroup`.",
            "items": {
              "$ref": "#/components/schemas/ReportRequest"
            },
            "type": "array"
          },
          "useResourceQuotas": {
            "description": "Enables\n[resource based\nquotas](/analytics/devguides/reporting/core/v4/limits-quotas#analytics_reporting_api_v4),\n(defaults to `False`). If this field is set to `True` the\nper view (profile) quotas are governed by the computational\ncost of the request. Note that using cost based quotas will\nhigher enable sampling rates. (10 Million for `SMALL`,\n100M for `LARGE`. See the\n[limits and quotas\ndocumentation](/analytics/devguides/reporting/core/v4/limits-quotas#analytics_reporting_api_v4)\nfor details.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GetReportsResponse": {
        "description": "The main response class which holds the reports from the Reporting API\n`batchGet` call.",
        "properties": {
          "queryCost": {
            "description": "The amount of resource quota tokens deducted to execute the query. Includes\nall responses.",
            "format": "int32",
            "type": "integer"
          },
          "reports": {
            "description": "Responses corresponding to each of the request.",
            "items": {
              "$ref": "#/components/schemas/Report"
            },
            "type": "array"
          },
          "resourceQuotasRemaining": {
            "$ref": "#/components/schemas/ResourceQuotasRemaining",
            "description": "The amount of resource quota remaining for the property."
          }
        },
        "type": "object"
      },
      "GoalData": {
        "description": "Represents all the details pertaining to a goal.",
        "properties": {
          "goalCompletionLocation": {
            "description": "URL of the page where this goal was completed.",
            "type": "string"
          },
          "goalCompletions": {
            "description": "Total number of goal completions in this activity.",
            "format": "int64",
            "type": "string"
          },
          "goalIndex": {
            "description": "This identifies the goal as configured for the profile.",
            "format": "int32",
            "type": "integer"
          },
          "goalName": {
            "description": "Name of the goal.",
            "type": "string"
          },
          "goalPreviousStep1": {
            "description": "URL of the page one step prior to the goal completion.",
            "type": "string"
          },
          "goalPreviousStep2": {
            "description": "URL of the page two steps prior to the goal completion.",
            "type": "string"
          },
          "goalPreviousStep3": {
            "description": "URL of the page three steps prior to the goal completion.",
            "type": "string"
          },
          "goalValue": {
            "description": "Value in this goal.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoalSetData": {
        "description": "Represents a set of goals that were reached in an activity.",
        "properties": {
          "goals": {
            "description": "All the goals that were reached in the current activity.",
            "items": {
              "$ref": "#/components/schemas/GoalData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Metric": {
        "description": "[Metrics](https://support.google.com/analytics/answer/1033861)\nare the quantitative measurements. For example, the metric `ga:users`\nindicates the total number of users for the requested time period.",
        "properties": {
          "alias": {
            "description": "An alias for the metric expression is an alternate name for the\nexpression. The alias can be used for filtering and sorting. This field\nis optional and is useful if the expression is not a single metric but\na complex expression which cannot be used in filtering and sorting.\nThe alias is also used in the response column header.",
            "type": "string"
          },
          "expression": {
            "description": "A metric expression in the request. An expression is constructed from one\nor more metrics and numbers. Accepted operators include: Plus (+), Minus\n(-), Negation (Unary -), Divided by (/), Multiplied by (*), Parenthesis,\nPositive cardinal numbers (0-9), can include decimals and is limited to\n1024 characters. Example `ga:totalRefunds/ga:users`, in most cases the\nmetric expression is just a single metric name like `ga:users`.\nAdding mixed `MetricType` (E.g., `CURRENCY` + `PERCENTAGE`) metrics\nwill result in unexpected results.",
            "type": "string"
          },
          "formattingType": {
            "description": "Specifies how the metric expression should be formatted, for example\n`INTEGER`.",
            "enum": [
              "METRIC_TYPE_UNSPECIFIED",
              "INTEGER",
              "FLOAT",
              "CURRENCY",
              "PERCENT",
              "TIME"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetricFilter": {
        "description": "MetricFilter specifies the filter on a metric.",
        "properties": {
          "comparisonValue": {
            "description": "The value to compare against.",
            "type": "string"
          },
          "metricName": {
            "description": "The metric that will be filtered on. A metricFilter must contain a metric\nname. A metric name can be an alias earlier defined as a metric or it can\nalso be a metric expression.",
            "type": "string"
          },
          "not": {
            "description": "Logical `NOT` operator. If this boolean is set to true, then the matching\nmetric values will be excluded in the report. The default is false.",
            "type": "boolean"
          },
          "operator": {
            "description": "Is the metric `EQUAL`, `LESS_THAN` or `GREATER_THAN` the\ncomparisonValue, the default is `EQUAL`. If the operator is\n`IS_MISSING`, checks if the metric is missing and would ignore the\ncomparisonValue.",
            "enum": [
              "OPERATOR_UNSPECIFIED",
              "EQUAL",
              "LESS_THAN",
              "GREATER_THAN",
              "IS_MISSING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetricFilterClause": {
        "description": "Represents a group of metric filters.\nSet the operator value to specify how the filters are logically combined.",
        "properties": {
          "filters": {
            "description": "The repeated set of filters. They are logically combined based on the\noperator specified.",
            "items": {
              "$ref": "#/components/schemas/MetricFilter"
            },
            "type": "array"
          },
          "operator": {
            "description": "The operator for combining multiple metric filters. If unspecified, it is\ntreated as an `OR`.",
            "enum": [
              "OPERATOR_UNSPECIFIED",
              "OR",
              "AND"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetricHeader": {
        "description": "The headers for the metrics.",
        "properties": {
          "metricHeaderEntries": {
            "description": "Headers for the metrics in the response.",
            "items": {
              "$ref": "#/components/schemas/MetricHeaderEntry"
            },
            "type": "array"
          },
          "pivotHeaders": {
            "description": "Headers for the pivots in the response.",
            "items": {
              "$ref": "#/components/schemas/PivotHeader"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetricHeaderEntry": {
        "description": "Header for the metrics.",
        "properties": {
          "name": {
            "description": "The name of the header.",
            "type": "string"
          },
          "type": {
            "description": "The type of the metric, for example `INTEGER`.",
            "enum": [
              "METRIC_TYPE_UNSPECIFIED",
              "INTEGER",
              "FLOAT",
              "CURRENCY",
              "PERCENT",
              "TIME"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrFiltersForSegment": {
        "description": "A list of segment filters in the `OR` group are combined with the logical OR\noperator.",
        "properties": {
          "segmentFilterClauses": {
            "description": "List of segment filters to be combined with a `OR` operator.",
            "items": {
              "$ref": "#/components/schemas/SegmentFilterClause"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OrderBy": {
        "description": "Specifies the sorting options.",
        "properties": {
          "fieldName": {
            "description": "The field which to sort by. The default sort order is ascending. Example:\n`ga:browser`.\nNote, that you can only specify one field for sort here. For example,\n`ga:browser, ga:city` is not valid.",
            "type": "string"
          },
          "orderType": {
            "description": "The order type. The default orderType is `VALUE`.",
            "enum": [
              "ORDER_TYPE_UNSPECIFIED",
              "VALUE",
              "DELTA",
              "SMART",
              "HISTOGRAM_BUCKET",
              "DIMENSION_AS_INTEGER"
            ],
            "type": "string"
          },
          "sortOrder": {
            "description": "The sorting order for the field.",
            "enum": [
              "SORT_ORDER_UNSPECIFIED",
              "ASCENDING",
              "DESCENDING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PageviewData": {
        "description": "Represents details collected when the visitor views a page.",
        "properties": {
          "pagePath": {
            "description": "The URL of the page that the visitor viewed.",
            "type": "string"
          },
          "pageTitle": {
            "description": "The title of the page that the visitor viewed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Pivot": {
        "description": "The Pivot describes the pivot section in the request.\nThe Pivot helps rearrange the information in the table for certain reports\nby pivoting your data on a second dimension.",
        "properties": {
          "dimensionFilterClauses": {
            "description": "DimensionFilterClauses are logically combined with an `AND` operator: only\ndata that is included by all these DimensionFilterClauses contributes to\nthe values in this pivot region. Dimension filters can be used to restrict\nthe columns shown in the pivot region. For example if you have\n`ga:browser` as the requested dimension in the pivot region, and you\nspecify key filters to restrict `ga:browser` to only \"IE\" or \"Firefox\",\nthen only those two browsers would show up as columns.",
            "items": {
              "$ref": "#/components/schemas/DimensionFilterClause"
            },
            "type": "array"
          },
          "dimensions": {
            "description": "A list of dimensions to show as pivot columns. A Pivot can have a maximum\nof 4 dimensions. Pivot dimensions are part of the restriction on the\ntotal number of dimensions allowed in the request.",
            "items": {
              "$ref": "#/components/schemas/Dimension"
            },
            "type": "array"
          },
          "maxGroupCount": {
            "description": "Specifies the maximum number of groups to return.\nThe default value is 10, also the maximum value is 1,000.",
            "format": "int32",
            "type": "integer"
          },
          "metrics": {
            "description": "The pivot metrics. Pivot metrics are part of the\nrestriction on total number of metrics allowed in the request.",
            "items": {
              "$ref": "#/components/schemas/Metric"
            },
            "type": "array"
          },
          "startGroup": {
            "description": "If k metrics were requested, then the response will contain some\ndata-dependent multiple of k columns in the report.  E.g., if you pivoted\non the dimension `ga:browser` then you'd get k columns for \"Firefox\", k\ncolumns for \"IE\", k columns for \"Chrome\", etc. The ordering of the groups\nof columns is determined by descending order of \"total\" for the first of\nthe k values.  Ties are broken by lexicographic ordering of the first\npivot dimension, then lexicographic ordering of the second pivot\ndimension, and so on.  E.g., if the totals for the first value for\nFirefox, IE, and Chrome were 8, 2, 8, respectively, the order of columns\nwould be Chrome, Firefox, IE.\n\nThe following let you choose which of the groups of k columns are\nincluded in the response.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PivotHeader": {
        "description": "The headers for each of the pivot sections defined in the request.",
        "properties": {
          "pivotHeaderEntries": {
            "description": "A single pivot section header.",
            "items": {
              "$ref": "#/components/schemas/PivotHeaderEntry"
            },
            "type": "array"
          },
          "totalPivotGroupsCount": {
            "description": "The total number of groups for this pivot.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PivotHeaderEntry": {
        "description": "The headers for the each of the metric column corresponding to the metrics\nrequested in the pivots section of the response.",
        "properties": {
          "dimensionNames": {
            "description": "The name of the dimensions in the pivot response.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dimensionValues": {
            "description": "The values for the dimensions in the pivot.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metric": {
            "$ref": "#/components/schemas/MetricHeaderEntry",
            "description": "The metric header for the metric in the pivot."
          }
        },
        "type": "object"
      },
      "PivotValueRegion": {
        "description": "The metric values in the pivot region.",
        "properties": {
          "values": {
            "description": "The values of the metrics in each of the pivot regions.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductData": {
        "description": "Details of the products in an e-commerce transaction.",
        "properties": {
          "itemRevenue": {
            "description": "The total revenue from purchased product items.",
            "format": "double",
            "type": "number"
          },
          "productName": {
            "description": "The product name, supplied by the e-commerce tracking application, for\nthe purchased items.",
            "type": "string"
          },
          "productQuantity": {
            "description": "Total number of this product units in the transaction.",
            "format": "int64",
            "type": "string"
          },
          "productSku": {
            "description": "Unique code that represents the product.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Report": {
        "description": "The data response corresponding to the request.",
        "properties": {
          "columnHeader": {
            "$ref": "#/components/schemas/ColumnHeader",
            "description": "The column headers."
          },
          "data": {
            "$ref": "#/components/schemas/ReportData",
            "description": "Response data."
          },
          "nextPageToken": {
            "description": "Page token to retrieve the next page of results in the list.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportData": {
        "description": "The data part of the report.",
        "properties": {
          "dataLastRefreshed": {
            "description": "The last time the data in the report was refreshed. All the hits received\nbefore this timestamp are included in the calculation of the report.",
            "format": "google-datetime",
            "type": "string"
          },
          "isDataGolden": {
            "description": "Indicates if response to this request is golden or not. Data is\ngolden when the exact same request will not produce any new results if\nasked at a later point in time.",
            "type": "boolean"
          },
          "maximums": {
            "description": "Minimum and maximum values seen over all matching rows. These are both\nempty when `hideValueRanges` in the request is false, or when\nrowCount is zero.",
            "items": {
              "$ref": "#/components/schemas/DateRangeValues"
            },
            "type": "array"
          },
          "minimums": {
            "description": "Minimum and maximum values seen over all matching rows. These are both\nempty when `hideValueRanges` in the request is false, or when\nrowCount is zero.",
            "items": {
              "$ref": "#/components/schemas/DateRangeValues"
            },
            "type": "array"
          },
          "rowCount": {
            "description": "Total number of matching rows for this query.",
            "format": "int32",
            "type": "integer"
          },
          "rows": {
            "description": "There's one ReportRow for every unique combination of dimensions.",
            "items": {
              "$ref": "#/components/schemas/ReportRow"
            },
            "type": "array"
          },
          "samplesReadCounts": {
            "description": "If the results are\n[sampled](https://support.google.com/analytics/answer/2637192),\nthis returns the total number of samples read, one entry per date range.\nIf the results are not sampled this field will not be defined. See\n[developer guide](/analytics/devguides/reporting/core/v4/basics#sampling)\nfor details.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "samplingSpaceSizes": {
            "description": "If the results are\n[sampled](https://support.google.com/analytics/answer/2637192),\nthis returns the total number of\nsamples present, one entry per date range. If the results are not sampled\nthis field will not be defined. See\n[developer guide](/analytics/devguides/reporting/core/v4/basics#sampling)\nfor details.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "totals": {
            "description": "For each requested date range, for the set of all rows that match\nthe query, every requested value format gets a total. The total\nfor a value format is computed by first totaling the metrics\nmentioned in the value format and then evaluating the value\nformat as a scalar expression.  E.g., The \"totals\" for\n`3 / (ga:sessions + 2)` we compute\n`3 / ((sum of all relevant ga:sessions) + 2)`.\nTotals are computed before pagination.",
            "items": {
              "$ref": "#/components/schemas/DateRangeValues"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReportRequest": {
        "description": "The main request class which specifies the Reporting API request.",
        "properties": {
          "cohortGroup": {
            "$ref": "#/components/schemas/CohortGroup",
            "description": "Cohort group associated with this request. If there is a cohort group\nin the request the `ga:cohort` dimension must be present.\nEvery [ReportRequest](#ReportRequest) within a `batchGet` method must\ncontain the same `cohortGroup` definition."
          },
          "dateRanges": {
            "description": "Date ranges in the request. The request can have a maximum of 2 date\nranges. The response will contain a set of metric values for each\ncombination of the dimensions for each date range in the request. So, if\nthere are two date ranges, there will be two set of metric values, one for\nthe original date range and one for the second date range.\nThe `reportRequest.dateRanges` field should not be specified for cohorts\nor Lifetime value requests.\nIf a date range is not provided, the default date range is (startDate:\ncurrent date - 7 days, endDate: current date - 1 day). Every\n[ReportRequest](#ReportRequest) within a `batchGet` method must\ncontain the same `dateRanges` definition.",
            "items": {
              "$ref": "#/components/schemas/DateRange"
            },
            "type": "array"
          },
          "dimensionFilterClauses": {
            "description": "The dimension filter clauses for filtering Dimension Values. They are\nlogically combined with the `AND` operator. Note that filtering occurs\nbefore any dimensions are aggregated, so that the returned metrics\nrepresent the total for only the relevant dimensions.",
            "items": {
              "$ref": "#/components/schemas/DimensionFilterClause"
            },
            "type": "array"
          },
          "dimensions": {
            "description": "The dimensions requested.\nRequests can have a total of 9 dimensions.",
            "items": {
              "$ref": "#/components/schemas/Dimension"
            },
            "type": "array"
          },
          "filtersExpression": {
            "description": "Dimension or metric filters that restrict the data returned for your\nrequest. To use the `filtersExpression`, supply a dimension or metric on\nwhich to filter, followed by the filter expression. For example, the\nfollowing expression selects `ga:browser` dimension which starts with\nFirefox; `ga:browser=~^Firefox`. For more information on dimensions\nand metric filters, see\n[Filters\nreference](https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters).",
            "type": "string"
          },
          "hideTotals": {
            "description": "If set to true, hides the total of all metrics for all the matching rows,\nfor every date range. The default false and will return the totals.",
            "type": "boolean"
          },
          "hideValueRanges": {
            "description": "If set to true, hides the minimum and maximum across all matching rows.\nThe default is false and the value ranges are returned.",
            "type": "boolean"
          },
          "includeEmptyRows": {
            "description": "If set to false, the response does not include rows if all the retrieved\nmetrics are equal to zero. The default is false which will exclude these\nrows.",
            "type": "boolean"
          },
          "metricFilterClauses": {
            "description": "The metric filter clauses. They are logically combined with the `AND`\noperator.  Metric filters look at only the first date range and not the\ncomparing date range. Note that filtering on metrics occurs after the\nmetrics are aggregated.",
            "items": {
              "$ref": "#/components/schemas/MetricFilterClause"
            },
            "type": "array"
          },
          "metrics": {
            "description": "The metrics requested.\nRequests must specify at least one metric. Requests can have a\ntotal of 10 metrics.",
            "items": {
              "$ref": "#/components/schemas/Metric"
            },
            "type": "array"
          },
          "orderBys": {
            "description": "Sort order on output rows. To compare two rows, the elements of the\nfollowing are applied in order until a difference is found.  All date\nranges in the output get the same row order.",
            "items": {
              "$ref": "#/components/schemas/OrderBy"
            },
            "type": "array"
          },
          "pageSize": {
            "description": "Page size is for paging and specifies the maximum number of returned rows.\nPage size should be >= 0. A query returns the default of 1,000 rows.\nThe Analytics Core Reporting API returns a maximum of 100,000 rows per\nrequest, no matter how many you ask for. It can also return fewer rows\nthan requested, if there aren't as many dimension segments as you expect.\nFor instance, there are fewer than 300 possible values for `ga:country`,\nso when segmenting only by country, you can't get more than 300 rows,\neven if you set `pageSize` to a higher value.",
            "format": "int32",
            "type": "integer"
          },
          "pageToken": {
            "description": "A continuation token to get the next page of the results. Adding this to\nthe request will return the rows after the pageToken. The pageToken should\nbe the value returned in the nextPageToken parameter in the response to\nthe GetReports request.",
            "type": "string"
          },
          "pivots": {
            "description": "The pivot definitions. Requests can have a maximum of 2 pivots.",
            "items": {
              "$ref": "#/components/schemas/Pivot"
            },
            "type": "array"
          },
          "samplingLevel": {
            "description": "The desired report\n[sample](https://support.google.com/analytics/answer/2637192) size.\nIf the the `samplingLevel` field is unspecified the `DEFAULT` sampling\nlevel is used. Every [ReportRequest](#ReportRequest) within a\n`batchGet` method must contain the same `samplingLevel` definition. See\n[developer guide](/analytics/devguides/reporting/core/v4/basics#sampling)\n for details.",
            "enum": [
              "SAMPLING_UNSPECIFIED",
              "DEFAULT",
              "SMALL",
              "LARGE"
            ],
            "type": "string"
          },
          "segments": {
            "description": "Segment the data returned for the request. A segment definition helps look\nat a subset of the segment request. A request can contain up to four\nsegments. Every [ReportRequest](#ReportRequest) within a\n`batchGet` method must contain the same `segments` definition. Requests\nwith segments must have the `ga:segment` dimension.",
            "items": {
              "$ref": "#/components/schemas/Segment"
            },
            "type": "array"
          },
          "viewId": {
            "description": "The Analytics\n[view ID](https://support.google.com/analytics/answer/1009618)\nfrom which to retrieve data. Every [ReportRequest](#ReportRequest)\nwithin a `batchGet` method must contain the same `viewId`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportRow": {
        "description": "A row in the report.",
        "properties": {
          "dimensions": {
            "description": "List of requested dimensions.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metrics": {
            "description": "List of metrics for each requested DateRange.",
            "items": {
              "$ref": "#/components/schemas/DateRangeValues"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResourceQuotasRemaining": {
        "description": "The resource quota tokens remaining for the property after the request is\ncompleted.",
        "properties": {
          "dailyQuotaTokensRemaining": {
            "description": "Daily resource quota remaining remaining.",
            "format": "int32",
            "type": "integer"
          },
          "hourlyQuotaTokensRemaining": {
            "description": "Hourly resource quota tokens remaining.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ScreenviewData": {
        "properties": {
          "appName": {
            "description": "The application name.",
            "type": "string"
          },
          "mobileDeviceBranding": {
            "description": "Mobile manufacturer or branded name. Eg: \"Google\", \"Apple\" etc.",
            "type": "string"
          },
          "mobileDeviceModel": {
            "description": "Mobile device model. Eg: \"Pixel\", \"iPhone\" etc.",
            "type": "string"
          },
          "screenName": {
            "description": "The name of the screen.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SearchUserActivityRequest": {
        "description": "The request to fetch User Report from Reporting API `userActivity:get` call.",
        "properties": {
          "activityTypes": {
            "description": "Set of all activity types being requested. Only acvities matching these\ntypes will be returned in the response. If empty, all activies will be\nreturned.",
            "items": {
              "enum": [
                "ACTIVITY_TYPE_UNSPECIFIED",
                "PAGEVIEW",
                "SCREENVIEW",
                "GOAL",
                "ECOMMERCE",
                "EVENT"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange",
            "description": "Date range for which to retrieve the user activity. If a date range is not\nprovided, the default date range is (startDate: current date - 7 days,\nendDate: current date - 1 day)."
          },
          "pageSize": {
            "description": "Page size is for paging and specifies the maximum number of returned rows.\nPage size should be > 0. If the value is 0 or if the field isn't specified,\nthe request returns the default of 1000 rows per page.",
            "format": "int32",
            "type": "integer"
          },
          "pageToken": {
            "description": "A continuation token to get the next page of the results. Adding this to\nthe request will return the rows after the pageToken. The pageToken should\nbe the value returned in the nextPageToken parameter in the response to\nthe [SearchUserActivityRequest](#SearchUserActivityRequest) request.",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "Required. Unique user Id to query for. Every\n[SearchUserActivityRequest](#SearchUserActivityRequest) must contain this\nfield."
          },
          "viewId": {
            "description": "Required. The Analytics\n[view ID](https://support.google.com/analytics/answer/1009618)\nfrom which to retrieve data. Every\n[SearchUserActivityRequest](#SearchUserActivityRequest) must contain the\n`viewId`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SearchUserActivityResponse": {
        "description": "The response from `userActivity:get` call.",
        "properties": {
          "nextPageToken": {
            "description": "This token should be passed to\n[SearchUserActivityRequest](#SearchUserActivityRequest) to retrieve the\nnext page.",
            "type": "string"
          },
          "sampleRate": {
            "description": "This field represents the\n[sampling rate](https://support.google.com/analytics/answer/2637192) for\nthe given request and is a number between 0.0 to 1.0. See\n[developer guide](/analytics/devguides/reporting/core/v4/basics#sampling)\nfor details.",
            "format": "double",
            "type": "number"
          },
          "sessions": {
            "description": "Each record represents a session (device details, duration, etc).",
            "items": {
              "$ref": "#/components/schemas/UserActivitySession"
            },
            "type": "array"
          },
          "totalRows": {
            "description": "Total rows returned by this query (across different pages).",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Segment": {
        "description": "The segment definition, if the report needs to be segmented.\nA Segment is a subset of the Analytics data. For example, of the entire\nset of users, one Segment might be users from a particular country or city.",
        "properties": {
          "dynamicSegment": {
            "$ref": "#/components/schemas/DynamicSegment",
            "description": "A dynamic segment definition in the request."
          },
          "segmentId": {
            "description": "The segment ID of a built-in or custom segment, for example `gaid::-3`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SegmentDefinition": {
        "description": "SegmentDefinition defines the segment to be a set of SegmentFilters which\nare combined together with a logical `AND` operation.",
        "properties": {
          "segmentFilters": {
            "description": "A segment is defined by a set of segment filters which are combined\ntogether with a logical `AND` operation.",
            "items": {
              "$ref": "#/components/schemas/SegmentFilter"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SegmentDimensionFilter": {
        "description": "Dimension filter specifies the filtering options on a dimension.",
        "properties": {
          "caseSensitive": {
            "description": "Should the match be case sensitive, ignored for `IN_LIST` operator.",
            "type": "boolean"
          },
          "dimensionName": {
            "description": "Name of the dimension for which the filter is being applied.",
            "type": "string"
          },
          "expressions": {
            "description": "The list of expressions, only the first element is used for all operators",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "maxComparisonValue": {
            "description": "Maximum comparison values for `BETWEEN` match type.",
            "type": "string"
          },
          "minComparisonValue": {
            "description": "Minimum comparison values for `BETWEEN` match type.",
            "type": "string"
          },
          "operator": {
            "description": "The operator to use to match the dimension with the expressions.",
            "enum": [
              "OPERATOR_UNSPECIFIED",
              "REGEXP",
              "BEGINS_WITH",
              "ENDS_WITH",
              "PARTIAL",
              "EXACT",
              "IN_LIST",
              "NUMERIC_LESS_THAN",
              "NUMERIC_GREATER_THAN",
              "NUMERIC_BETWEEN"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SegmentFilter": {
        "description": "SegmentFilter defines the segment to be either a simple or a sequence\nsegment. A simple segment condition contains dimension and metric conditions\nto select the sessions or users. A sequence segment condition can be used to\nselect users or sessions based on sequential conditions.",
        "properties": {
          "not": {
            "description": "If true, match the complement of simple or sequence segment.\nFor example, to match all visits not from \"New York\", we can define the\nsegment as follows:\n\n      \"sessionSegment\": {\n        \"segmentFilters\": [{\n          \"simpleSegment\" :{\n            \"orFiltersForSegment\": [{\n              \"segmentFilterClauses\":[{\n                \"dimensionFilter\": {\n                  \"dimensionName\": \"ga:city\",\n                  \"expressions\": [\"New York\"]\n                }\n              }]\n            }]\n          },\n          \"not\": \"True\"\n        }]\n      },",
            "type": "boolean"
          },
          "sequenceSegment": {
            "$ref": "#/components/schemas/SequenceSegment",
            "description": "Sequence conditions consist of one or more steps, where each step is\ndefined by one or more dimension/metric conditions. Multiple steps can\nbe combined with special sequence operators."
          },
          "simpleSegment": {
            "$ref": "#/components/schemas/SimpleSegment",
            "description": "A Simple segment conditions consist of one or more dimension/metric\nconditions that can be combined"
          }
        },
        "type": "object"
      },
      "SegmentFilterClause": {
        "description": "Filter Clause to be used in a segment definition, can be wither a metric or\na dimension filter.",
        "properties": {
          "dimensionFilter": {
            "$ref": "#/components/schemas/SegmentDimensionFilter",
            "description": "Dimension Filter for the segment definition."
          },
          "metricFilter": {
            "$ref": "#/components/schemas/SegmentMetricFilter",
            "description": "Metric Filter for the segment definition."
          },
          "not": {
            "description": "Matches the complement (`!`) of the filter.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SegmentMetricFilter": {
        "description": "Metric filter to be used in a segment filter clause.",
        "properties": {
          "comparisonValue": {
            "description": "The value to compare against. If the operator is `BETWEEN`, this value is\ntreated as minimum comparison value.",
            "type": "string"
          },
          "maxComparisonValue": {
            "description": "Max comparison value is only used for `BETWEEN` operator.",
            "type": "string"
          },
          "metricName": {
            "description": "The metric that will be filtered on. A `metricFilter` must contain a\nmetric name.",
            "type": "string"
          },
          "operator": {
            "description": "Specifies is the operation to perform to compare the metric. The default\nis `EQUAL`.",
            "enum": [
              "UNSPECIFIED_OPERATOR",
              "LESS_THAN",
              "GREATER_THAN",
              "EQUAL",
              "BETWEEN"
            ],
            "type": "string"
          },
          "scope": {
            "description": "Scope for a metric defines the level at which that metric is defined.  The\nspecified metric scope must be equal to or greater than its primary scope\nas defined in the data model. The primary scope is defined by if the\nsegment is selecting users or sessions.",
            "enum": [
              "UNSPECIFIED_SCOPE",
              "PRODUCT",
              "HIT",
              "SESSION",
              "USER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SegmentSequenceStep": {
        "description": "A segment sequence definition.",
        "properties": {
          "matchType": {
            "description": "Specifies if the step immediately precedes or can be any time before the\nnext step.",
            "enum": [
              "UNSPECIFIED_MATCH_TYPE",
              "PRECEDES",
              "IMMEDIATELY_PRECEDES"
            ],
            "type": "string"
          },
          "orFiltersForSegment": {
            "description": "A sequence is specified with a list of Or grouped filters which are\ncombined with `AND` operator.",
            "items": {
              "$ref": "#/components/schemas/OrFiltersForSegment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SequenceSegment": {
        "description": "Sequence conditions consist of one or more steps, where each step is defined\nby one or more dimension/metric conditions. Multiple steps can be combined\nwith special sequence operators.",
        "properties": {
          "firstStepShouldMatchFirstHit": {
            "description": "If set, first step condition must match the first hit of the visitor (in\nthe date range).",
            "type": "boolean"
          },
          "segmentSequenceSteps": {
            "description": "The list of steps in the sequence.",
            "items": {
              "$ref": "#/components/schemas/SegmentSequenceStep"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SimpleSegment": {
        "description": "A Simple segment conditions consist of one or more dimension/metric\nconditions that can be combined.",
        "properties": {
          "orFiltersForSegment": {
            "description": "A list of segment filters groups which are combined with logical `AND`\noperator.",
            "items": {
              "$ref": "#/components/schemas/OrFiltersForSegment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TransactionData": {
        "description": "Represents details collected when the visitor performs a transaction on the\npage.",
        "properties": {
          "transactionId": {
            "description": "The transaction ID, supplied by the e-commerce tracking method, for the\npurchase in the shopping cart.",
            "type": "string"
          },
          "transactionRevenue": {
            "description": "The total sale revenue (excluding shipping and tax) of the transaction.",
            "format": "double",
            "type": "number"
          },
          "transactionShipping": {
            "description": "Total cost of shipping.",
            "format": "double",
            "type": "number"
          },
          "transactionTax": {
            "description": "Total tax for the transaction.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "User": {
        "description": "Contains information to identify a particular user uniquely.",
        "properties": {
          "type": {
            "description": "Type of the user in the request. The field `userId` is associated with this\ntype.",
            "enum": [
              "USER_ID_TYPE_UNSPECIFIED",
              "USER_ID",
              "CLIENT_ID"
            ],
            "type": "string"
          },
          "userId": {
            "description": "Unique Id of the user for which the data is being requested.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserActivitySession": {
        "description": "This represents a user session performed on a specific device at a certain\ntime over a period of time.",
        "properties": {
          "activities": {
            "description": "Represents a detailed view into each of the activity in this session.",
            "items": {
              "$ref": "#/components/schemas/Activity"
            },
            "type": "array"
          },
          "dataSource": {
            "description": "The data source of a hit. By default, hits sent from analytics.js are\nreported as \"web\" and hits sent from the mobile SDKs are reported as \"app\".\nThese values can be overridden in the Measurement Protocol.",
            "type": "string"
          },
          "deviceCategory": {
            "description": "The type of device used: \"mobile\", \"tablet\" etc.",
            "type": "string"
          },
          "platform": {
            "description": "Platform on which the activity happened: \"android\", \"ios\" etc.",
            "type": "string"
          },
          "sessionDate": {
            "description": "Date of this session in ISO-8601 format.",
            "type": "string"
          },
          "sessionId": {
            "description": "Unique ID of the session.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "Oauth2": {
        "description": "Oauth 2.0 implicit authentication",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
            "scopes": {
              "https://www.googleapis.com/auth/analytics": "View and manage your Google Analytics data",
              "https://www.googleapis.com/auth/analytics.readonly": "View your Google Analytics data"
            }
          }
        },
        "type": "oauth2"
      },
      "Oauth2c": {
        "description": "Oauth 2.0 accessCode authentication",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
            "scopes": {
              "https://www.googleapis.com/auth/analytics": "View and manage your Google Analytics data",
              "https://www.googleapis.com/auth/analytics.readonly": "View your Google Analytics data"
            },
            "tokenUrl": "https://accounts.google.com/o/oauth2/token"
          }
        },
        "type": "oauth2"
      }
    }
  }
}