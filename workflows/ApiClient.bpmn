<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="Definitions_0tbnrjl" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="3.7.0">
  <bpmn:process id="ApiClient" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>Flow_088fktg</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:serviceTask id="HtttCall" name="HttpCall">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="groovy">import static org.camunda.spin.Spin.*;
if (execution.hasVariable("query")) {
   query = JSON(execution.getVariable("query")).mapTo("java.util.Map&lt;java.lang.String, java.lang.String&gt;");
} else {
   query = [:]
}

def queryParams = query.findAll { 
   it.value != null 
}.collect {
   id, value -&gt; id + "=" + value
}
def queryString = queryParams.size() == 0 ? ""
                                          : "?" + queryParams.join("&amp;")
def url = execution.getVariable("url") + queryString
println(url)
url</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:script scriptFormat="groovy">import static org.camunda.spin.Spin.*;
if (!execution.hasVariable("headers")) return [:];
// execution.getVariable("headers").mapTo("java.util.Map&lt;java.lang.String, java.lang.String&gt;");
// TODO we should have headers as native types probably
def headers = JSON(execution.getVariable("headers")).mapTo("java.util.Map&lt;java.lang.String, java.lang.String&gt;");
println "headers " + headers
headers</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">${method}</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="groovy">// No request parameter, no body
if (!execution.hasVariable("request")) return null;
def request = execution.getVariable("request").toString();
println "request: " + request
request</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="debug">true</camunda:inputParameter>
            <camunda:outputParameter name="statusCode">
              <camunda:script scriptFormat="groovy">statusCode.toInteger()</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="response">${response}</camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0kebagn</bpmn:incoming>
      <bpmn:outgoing>Flow_1o4gipc</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_088fktg" sourceRef="StartEvent_1" targetRef="Activity_0cb9vmr" />
    <bpmn:endEvent id="Event_1xx666m">
      <bpmn:incoming>Flow_046k02p</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_1o4gipc" sourceRef="HtttCall" targetRef="Activity_06rnj4a" />
    <bpmn:scriptTask id="Activity_0cb9vmr" scriptFormat="groovy">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="prefix">pre</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_088fktg</bpmn:incoming>
      <bpmn:outgoing>Flow_0kebagn</bpmn:outgoing>
      <bpmn:script>import java.util.regex.Pattern
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Configuration;
import com.jayway.jsonpath.PathNotFoundException;
import static org.camunda.spin.Spin.*;

/**
* Looks for process variables of the form
* &lt;PREFIX&gt;_&lt;COMMAND&gt;_&lt;TARGET&gt;_&lt;DATATYPE&gt;_&lt;JSONPATH&gt;
* where prefix is supplied in a local variable
*
* E.g.
* pre_SET_request_String_$['token']   : 'ksadklasdkhjasdkljashda'
* post_EXTRACT_response_List_$.items  : 'taskList'
*/
// &lt;COMMAND&gt;_&lt;TARGET&gt;_&lt;DATATYPE&gt;_&lt;PATH&gt;
def command_re = ~/^(\S+) (\S+) (\S+) (.*)$/

def prefix = execution.getVariableLocal("prefix") ? execution.getVariableLocal("prefix") + " ": " ";

def popPath(path) { // This is bullshit that we need
    def parentkey_re = ~/^(?&lt;parent&gt;.*)\['(?&lt;key&gt;.*)'\]$/
    fullPath = JsonPath.compile(path).getPath(); // Canonicalize the path so simplify the regex
    def matcher = fullPath =~ parentkey_re
    matcher.matches()
    return [matcher.group('parent'), matcher.group('key')]
}

def exec(command, target, datatype, path, value) {
    println command + " " + target + " " + datatype + " " + path + " " + value
    
    def configuration = Configuration.defaultConfiguration().jsonProvider();

    if (command == "SET") {
        if (value == null) return;
        // read current value for the output
        def output = execution.getVariable(target);
        if (output == null) output = "{}";
        println("output " + output.toString());
        // println ("Setting " + output.toString() + " path " + path + " value " + value);

        // JsonPath.set will not create a key, so we have to go one level up and put 
        // the key. Which is an annoyance
        (parentPath, key) = popPath(path)
        
        Object result = JsonPath
                .using(configuration)
                .parse(output.toString())
                .put(parentPath, key, value) // see https://github.com/json-path/JsonPath/issues/570
                .jsonString(); // TODO we should probably stay in Spin
        println("Result " + result.toString());
        execution.setVariable(target, result);
    } else if (command == "EXTRACT") {
        // read current value for the target
        def input = execution.getVariable(target)
        if (input == null) input = "{}";
        println("input " + input.toString());
        try {
            Object data = JsonPath
                    .using(configuration)
                    .parse(input.toString())
                    .read(path);
            println "Extracted: " + data.toString();
            execution.setVariable(value, data);
        } catch (PathNotFoundException e) {
            System.err.println(e.getMessage()); 
        }
    } else {
        System.err.println "Unrecognised command: " + command; 
    }
}

execution.getVariables().findAll { 
    it.key.startsWith(prefix)
}.each { key, value -&gt; 
    def cmd = key.substring(prefix.length());
    def matcher = command_re.matcher(cmd)
    if (!matcher.matches()) {
        System.err.println "Cannot parse command line: " + cmd; 
    } else {
        def command = matcher.group(1);
        def target = matcher.group(2);
        def datatype = matcher.group(3);
        def path = matcher.group(4);
        exec(command, target, datatype, path, value)
    }
}</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0kebagn" sourceRef="Activity_0cb9vmr" targetRef="HtttCall" />
    <bpmn:scriptTask id="Activity_06rnj4a" scriptFormat="groovy">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="prefix">post</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1o4gipc</bpmn:incoming>
      <bpmn:outgoing>Flow_046k02p</bpmn:outgoing>
      <bpmn:script>import java.util.regex.Pattern
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Configuration;
import com.jayway.jsonpath.PathNotFoundException;
import static org.camunda.spin.Spin.*;

/**
* Looks for process variables of the form
* &lt;PREFIX&gt;_&lt;COMMAND&gt;_&lt;TARGET&gt;_&lt;DATATYPE&gt;_&lt;JSONPATH&gt;
* where prefix is supplied in a local variable
*
* E.g.
* pre_SET_request_String_$['token']   : 'ksadklasdkhjasdkljashda'
* post_EXTRACT_response_List_$.items  : 'taskList'
*/
// &lt;COMMAND&gt;_&lt;TARGET&gt;_&lt;DATATYPE&gt;_&lt;PATH&gt;
def command_re = ~/^(\S+) (\S+) (\S+) (.*)$/

def prefix = execution.getVariableLocal("prefix") ? execution.getVariableLocal("prefix") + " ": " ";

def popPath(path) { // This is bullshit that we need
    def parentkey_re = ~/^(?&lt;parent&gt;.*)\['(?&lt;key&gt;.*)'\]$/
    fullPath = JsonPath.compile(path).getPath(); // Canonicalize the path so simplify the regex
    def matcher = fullPath =~ parentkey_re
    matcher.matches()
    return [matcher.group('parent'), matcher.group('key')]
}

def exec(command, target, datatype, path, value) {
    println command + " " + target + " " + datatype + " " + path + " " + value
    
    def configuration = Configuration.defaultConfiguration().jsonProvider();

    if (command == "SET") {
        if (value == null) return;
        // read current value for the output
        def output = execution.getVariable(target);
        if (output == null) output = "{}";
        println("output " + output.toString());
        // println ("Setting " + output.toString() + " path " + path + " value " + value);

        // JsonPath.set will not create a key, so we have to go one level up and put 
        // the key. Which is an annoyance
        (parentPath, key) = popPath(path)
        
        Object result = JsonPath
                .using(configuration)
                .parse(output.toString())
                .put(parentPath, key, value) // see https://github.com/json-path/JsonPath/issues/570
                .jsonString(); // TODO we should probably stay in Spin
        println("Result " + result.toString());
        execution.setVariable(target, result);
    } else if (command == "EXTRACT") {
        // read current value for the target
        def input = execution.getVariable(target)
        if (input == null) input = "{}";
        println("input " + input.toString());
        try {
            Object data = JsonPath
                    .using(configuration)
                    .parse(input.toString())
                    .read(path);
            println "Extracted: " + data.toString();
            execution.setVariable(value, data);
        } catch (PathNotFoundException e) {
            System.err.println(e.getMessage()); 
        }
    } else {
        System.err.println "Unrecognised command: " + command; 
    }
}

execution.getVariables().findAll { 
    it.key.startsWith(prefix)
}.each { key, value -&gt; 
    def cmd = key.substring(prefix.length());
    def matcher = command_re.matcher(cmd)
    if (!matcher.matches()) {
        System.err.println "Cannot parse command line: " + cmd; 
    } else {
        def command = matcher.group(1);
        def target = matcher.group(2);
        def datatype = matcher.group(3);
        def path = matcher.group(4);
        exec(command, target, datatype, path, value)
    }
}</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_046k02p" sourceRef="Activity_06rnj4a" targetRef="Event_1xx666m" />
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="ApiClient">
      <bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1">
        <dc:Bounds x="152" y="99" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0nut88c_di" bpmnElement="HtttCall">
        <dc:Bounds x="360" y="77" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_088fktg_di" bpmnElement="Flow_088fktg">
        <di:waypoint x="188" y="117" />
        <di:waypoint x="220" y="117" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Event_1xx666m_di" bpmnElement="Event_1xx666m">
        <dc:Bounds x="632" y="99" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_1o4gipc_di" bpmnElement="Flow_1o4gipc">
        <di:waypoint x="460" y="117" />
        <di:waypoint x="490" y="117" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Activity_0cb9vmr_di" bpmnElement="Activity_0cb9vmr">
        <dc:Bounds x="220" y="77" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_0kebagn_di" bpmnElement="Flow_0kebagn">
        <di:waypoint x="320" y="117" />
        <di:waypoint x="360" y="117" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Activity_06rnj4a_di" bpmnElement="Activity_06rnj4a">
        <dc:Bounds x="490" y="77" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_046k02p_di" bpmnElement="Flow_046k02p">
        <di:waypoint x="590" y="117" />
        <di:waypoint x="632" y="117" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
